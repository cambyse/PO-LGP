# activate_pickup 2 action binary
# terminate_pickup 2 action binary  
# activate_positioning 1 action binary 
# terminate_positioning 1 action binary 
# activate_release 1 action binary 
# terminate_release 1 action binary 
# activate_screwing 3 action binary 
# terminate_screwing 3 action binary 

## why do we need these?
pickup
positioning
screwing
release

## basic predicates
table
on
wall
screw
ground
object
humR
humL
rob
hand
used
inPosition
inhand
fixed

## activity predicates
active_pickup
active_positioning
active_screwing
active_release
busy
inhandNil

## constants
Constant 66
Constant 67
Constant 71
Constant 72
Constant 76
Constant 77
Constant 78

## initial state
(table 66)
(screw 67)
(object 67)
(on 66 67)
(ground 71)
(on 66 71)
(object 71)
(wall 72)
(object 72)
(on 66 72)
(humR 76)
(hand 76)
(humL 77)
(hand 77)
(rob 78)
(hand 78)
(inhandNil 76)
(inhandNil 77)
(inhandNil 78)

### RULES

Rule activate_pickup {
     X, Y, Z
     (pickup X Y)! (hand X) (object Y) (inhandNil X) (table Z) (on Z Y) (busy X)! (active_pickup X Y)!
     out1{ (pickup X Y)=2.1 (active_pickup X Y) (busy X) }
}


Rule terminate_pickup {
     X, Y, Z
     (pickup X Y)! (active_pickup X Y) (busy X) (hand X) (object Y) (inhandNil X) (table Z) (on Z Y)
     out1 { (inhand X Y) (pickup X Y)! (on Z Y)! (active_pickup X Y)! (busy X)! }
}


Rule activate_positioning {
     X, Y
     (positioning X)=0 (hand X) (object Y) (inhand X Y) (inPosition Y)! (busy X)! (active_positioning X)! 
     out1 { (positioning X)=3.1 (active_positioning X) (busy X) (inhand X Y) }
}

Rule terminate_positioning {
     X, Y
     (positioning X)=0 (active_positioning X) (busy X) (hand X) (object Y) (inhand X Y)
     out1 { (inhand X Y) (inPosition Y)  (positioning X)=0 (active_positioning X)! (busy X)! }
}

Rule activate_release {
     X, Y
     (release X)=0 (hand X) (object Y) (inhand X Y) (busy X)! (active_release X)!
     out1 { (release X)=1.0 (active_release X) (busy X) (inhand X Y) }
}
 

Rule terminate_release {
     X, Y
     (release X)=0 (active_release X) (busy X) (hand X) (object Y) (inhand X Y)
     out1 { (release X)=0 (inhand X Y)! (active_release X)! (busy X)! }
}

Rule activate_screwing {
     X, Y, Z, U, V, W
     (screwing X)=0 (hand X) (screw Y) (inhand X Y) (wall Z) (ground W) (inPosition Z) (inPosition W) (hand U) (inhand U Z) (hand V) (inhand V W) (fixed Z W)! (active_screwing X)! (busy X)! (busy U)! (busy V)!  (used Y)!
     out1 { (screwing X)=8.0 (active_screwing X) (busy X) (busy U) (busy V) (inhand X Y) (inPosition Z) (inPosition W) (inhand U Z) (inhand V W) }
}

Rule terminate_screwing {
     X, Y, Z, U, V, W
     (screwing X)! (active_screwing X) (busy X) (busy U) (busy V) (hand X) (screw Y) (inhand X Y) (wall Z) (ground W) (inPosition Z) (inPosition W) (hand U) (inhand U Z) (hand V) (inhand V W)
     out1 { (screwing X)! (fixed Z W) (used Y) (inPosition Z) (inPosition W) (inhand U Z) (inhand V W) (busy X)! (busy U)! (busy V)! (inhand X Y)!  (active_screwing X)! }
}
