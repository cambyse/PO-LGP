** task & constraints

check the consistency of the constraintProcyVariable with squared
penelty and old task variables

** task map
* clean up DefaultTaskMap -> spearate in separate classes

** PR2
* force torqu sensor in regler integrieren
* low gain turning of handles (don't think as them as parts of the robot,no exact model, just relax and pull somehow)
* generell: sobald man etwas anfasst: relax, gravity compensation is easier
* action for pregrasp
* task variable that allows a target RANGE

** traj optim

- don't include task with zero prec in $f_t$ terms
- mix vel and acc penalties for optimization

** ROS msgs

python2 $ROSDIR/lib/gencpp/gen_cpp.py \
        $MSGFILE \
        -p $PKGNAME \
        -e $ROSDIR/share/gencpp \
        -I "std_msgs:$ROSDIR/share/std_msgs/msg" \
        -I "geometry_msgs:$ROSDIR/share/geometry_msgs/msg" \
        -o $OUTPUTDIR

Johannes

**

LOG in motion.cpp
clearly introduce constraint maps as tasks -- feasibility, automatic penalty reduction

** drive the robot:
http://wiki.ros.org/pr2_controllers/Tutorials/Using%20the%20robot%20base%20controllers%20to%20drive%20the%20robot

** checkJointDimension is really const (HALT if state was not set)
getJointDimension is not const

** KVG

dot interpretation (dot as 2st key -> color shape everything just copy!)

** Proper ConstrainedTaskMap:
virtual function g
can provide also $y=(1+g/m) [g>-m]$ (is consistent with lecture & code)
bool constraint;
double margin;
arr getY()
arr getFeasible()
arr getG()

** Logging:

LOG(1) <<"message on level 1 (normal verbose level)";
LOG(0) <<"warning -- replaces as MT_MSG(...)";
LOG(-1) <<"error -- throws error, replaces as HALT(...)";
LOG(-2) <<"error -- exits, replaces as HALT(...)";

#define LOG(log_level) LogToken(__FILE, log_level, __FILE__, __LINE__)

struct LogToken{
       MT::String msg;
       LogToken(const char* topic, int log_level, const char* filename, uint line);
       ~LogToken();
       ostream&()(){ return msg; }
};

void setLogLevel(const char* topic, int l, bool forLogFile=false);

The destructor ~LogToken writes into the log file and
console. setLogLevel allows to adjust cout verbosity (0 by default),
and what is written into the log file (1 by default)
