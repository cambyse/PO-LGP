** core stuff

* MotionProblem + MotionProblemFunction -> MotionProgram
* use Program instead of Problem in optim
* ors::KinematicWorld -> ors::KinematicGraph
* Ors -> Kinematic
* loading parameters -> KeyValueGraph
* KeyValueGraph -> Graph


** module system

* check catching of SIGINT when linking to ROS
* Vars should publish & subscribe automatically!
  * topic "MLR/name"
  * by default: they should have a ROS mesage type
  * otherwise, generic packedData type {string c-type; byte [][]}
  * Maybe have a look again on shared memory!
* pr2 controller: check max diff > 0.2 !!
* Module -> Process


** PR2 controller

* make everything linear
* have data stuctures
  * JointConfigInfo { map index-to-name } ? (Necessary?)
  * JointControllerRefs { q_ref, Kq_matrix, Kd_factor, u_bias, fL_ref, fR_ref, KfL, KfR }
  * JointControllerState { q_real, qdot_real, u_cmd, u_real, fL_real, fR_real }

** task & constraints

check the consistency of the constraintProxyVariable with squared
penelty and old task variables


** PR2
* low gain turning of handles (don't think as them as parts of the robot,no exact model, just relax and pull somehow)
* generell: sobald man etwas anfasst: relax, gravity compensation is easier
* action for pregrasp
* task variable that allows a target RANGE

**

LOG in motion.cpp
clearly introduce constraint maps as tasks -- feasibility, automatic penalty reduction

** checkJointDimension is really const (HALT if state was not set)
getJointDimension is not const

** KVG

dot interpretation (dot as 2st key -> color shape everything just copy!)

** Proper ConstrainedTaskMap:
virtual function g
can provide also $y=(1+g/m) [g>-m]$ (is consistent with lecture & code)
bool constraint;
double margin;
arr getY()
arr getFeasible()
arr getG()

** Logging:

LOG(1) <<"message on level 1 (normal verbose level)";
LOG(0) <<"warning -- replaces as MT_MSG(...)";
LOG(-1) <<"error -- throws error, replaces as HALT(...)";
LOG(-2) <<"error -- exits, replaces as HALT(...)";

#define LOG(log_level) LogToken(__FILE, log_level, __FILE__, __LINE__)

struct LogToken{
       MT::String msg;
       LogToken(const char* topic, int log_level, const char* filename, uint line);
       ~LogToken();
       ostream&()(){ return msg; }
};

void setLogLevel(const char* topic, int l, bool forLogFile=false);

The destructor ~LogToken writes into the log file and
console. setLogLevel allows to adjust cout verbosity (0 by default),
and what is written into the log file (1 by default)
