/** @page coding_conventions Coding Conventions

@note There is share/src/style.astyle for <a href="http://astyle.sourceforge.net/">astyle</a>.

- Take the Google C++ style as default:
  http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml.
  The rules below overwrite Google conventions.
- Output parameters before input parameters in function declarations.
- Naming convention <tt>name_of_a_routine(ouput,input)</tt>; is
  perhaps better than my old <tt>nameOfARoutine(..)</tt> style.
- Make headers as clean and short and concise as possible!
- Try to avoid \a \#include in header files as much as possible!!
  In particular, when a class's methods require an external library;
  this external library should be included only in the cpp-file.
  In particular, try to avoid \a \#include \a "external_lib" in headers!!
  (I tried to get rid of them as much as possible in all my *.h)
- Try to avoid \a \#include in header files as much as possible!!
  If you think the class needs to contain members/data structures defined
  in an external library and therefore you need to include its header
  in your header --- that's often not true. Instead, hide all members
  in a \e hidden_self.

Bad example:
\code
//h-file:
#include <OpenCV> //BAD
struct MyClass{
  OpenCV_DataStructure data;
};
\endcode

Good example:
\code
//h-file:
// forward declaration of a 'hidden self' that will contain all members hidden from the header
struct sMyClass;

struct MyClass{
  sMyClass *s; //maybe call it 'self' instead
};

//cpp-file:
#include <OpenCV> //GOOD

struct sMyClass{
  OpenCV_DataStructure data;
};
MyClass::MyClass(){
  s = new sMyClass;
}
\endcode

- Move documentation to cpp files. Advantages: You can write as
  long and lengthy documentation as you want without destroying the
  beauty of the header. Doxygen will compile this without problem to
  provide a nice documentation. If people want to read the
  documentation from source directly---it's not much of a hassle to
  find the definition in the cpp file.
- Never ever use \a \#ifdef directives in a header file if this
  influences definition of classes, especially which members (and
  'size') a class has!
  The following debugging horror may happen: You define a class to
  have different members depending on a compiler flag. You compile
  your library with some compiler flags. The user includes your header
  with other compiler flags. Everything seems to compile and link
  fine. But when the user accesses members of the class, he actually
  refers to different memory addesses as your routines in your
  library.
  Therefore try to avoid \a \#ifdefs in headers as much as possible! Move
  them to the cpp file!
- If you don't have a preferred IDE, use kdevelop.
  - K&R formatting conventions!
  - Editing: use spaces instead of tabs. 2 characters. Identation with 2
    characters.
  - Keys: F10,11,12: step, step in, step out, F9: toggle break; F8 clean, F7
    build, F5 debug run, CtrlF5 run, F6 continue - fltk lists their conventions
  - I like them, also their style of formatting and their makefile
    conventions

*/
