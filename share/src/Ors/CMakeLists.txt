include(CheckIncludeFile)
include(CheckIncludeFileCXX)

option(WITH_PHYSX "Use NVidia PhysX libraries" OFF)
option(PHYSX_ROOT "Root path for searchin PhysX" ${MLR_LIBPATH})
if(WITH_PHYSX)
        if(PHYSX_ROOT)
          set(CMAKE_REQUIRED_INCLUDES ${PHYSX_ROOT}/include)
        endif(PHYSX_ROOT)
        check_include_file_cxx("physx/PxPhysx.h" PHYSX_H_FOUND)
        unset(CMAKE_REQUIRED_INCLUDES)
        if(PHYSX_H_FOUND)
            add_definitions(-DMT_PHYSX)
        else(PHYSX_H_FOUND)
            message(STATUS "PhysX header not found")
        endif(PHYSX_H_FOUND)                
endif(WITH_PHYSX)
option(WITH_ODE "Use ODE" OFF)
if(WITH_ODE)
        if(ODE_ROOT)
          set(CMAKE_REQUIRED_INCLUDES ${ODE_ROOT}/include)
        endif(ODE_ROOT)
        check_include_file("ode/ode.h" ODE_H_FOUND)
        if(ODE_H_FOUND)
          check_include_file("ode/internal/objects.h" ODE_INTERNAL_H_FOUND)
          if(ODE_INTERNAL_H_FOUND)
            add_definitions(-DMT_ODE)
          else(ODE_INTERNAL_H_FOUND)
            message(STATUS "ode.h found, but ode/internal directory missing -- you need to build ODE from source for Ors. Skipping ODE support")
          endif(ODE_INTERNAL_H_FOUND)
        else(ODE_H_FOUND)
            message(STATUS "ODE headers not found")
        endif(ODE_H_FOUND)
        unset(CMAKE_REQUIRED_INCLUDES)                        
endif(WITH_ODE)
option(WITH_OPENMP "Use OpenMP" OFF)
if(WITH_OPENMP)
        add_definitions(-fopenmp -DOPENMP)
endif(WITH_OPENMP)
# TODO option(MT_CUDA "Use CUDA" OFF)

set(CMAKE_CXX_FLAGS "${MLR_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")

include(.sources.cmake)

add_library(Ors SHARED ${SOURCES})
target_link_libraries(Ors LINK_PRIVATE Algo Core Gui extern_SWIFT)

# Python wrappers
if(PYTHON_OK)
  set(SWIG_SOURCES ors.i)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${PYTHON_INCLUDES})
  set_source_files_properties(${SWIG_SOURCES} PROPERTIES CPLUSPLUS ON)
  string(TOLOWER ${NAME}py PY)
  set(CMAKE_SWIG_FLAGS -module _${PY})
  swig_add_module(${PY} python ${SWIG_SOURCES})
  swig_link_libraries(${PY} ${NAME} ${PYTHON_LIBRARIES})
endif(PYTHON_OK)
