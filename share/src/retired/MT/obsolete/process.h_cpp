void reportGlobalProcessGraph();

struct Group {
  VariableL V;
  ProcessL P;
  
  void set(const VariableL&, const ProcessL&);
  void set(const ProcessL&);
  void open();
  void loop();
  void stop();
  void close();
  
};

====================================

void Group::set(const VariableL &_V, const ProcessL &_P){
  V = _V;
  P = _P;
}

void Group::set(const ProcessL &_P){
  P = _P;
}

void Group::open(){
  Process *p; uint i;
  for_list(i, p, P) p->threadOpen();
}

void Group::loop(){
  Process *p; uint i;
  for_list(i, p, P) p->threadLoop();
}

void Group::stop(){
  Process *p; uint i;
  for_list(i, p, P) p->threadStop();
}

void Group::close(){
  Process *p; uint i;
  for_list(i, p, P) p->threadClose();
}


//===========================================================================
//
// Global Static information
//

void reportGlobalProcessGraph(){
  ofstream fil("proc.graph");
  uint i, j;
  Variable *v;
  Process *p;
  globalInfo.readAccess(NULL);
  for_list(i, v, globalInfo.variables){
    fil <<"Variable " <<v->name <<endl;
  }
  fil <<endl;
  for_list(i, p, globalInfo.processes){
    fil <<"Process " <<p->name <<" (";
    fil <<")" <<endl;
  }
  globalInfo.deAccess(NULL);
  fil.close();
}

