
## a trivial graph
a    	     # key=a, value=true, parents=none
b	     # key=b, value=true, parents=none
(a b)	     # key=none, value=true, parents=a b

%include example_include.kvg

## a bit more verbose graph
node A{ color=blue }		# keys=node A, value=<KVG>, parents=none
node B{ color=red, value=5 }	# keys=node B, value=<KVG>, parents=none
edge C(A,B){ width=2 }	   	# keys=edge C, value=<KVG>, parents=A B
hyperedge(B C) = 5   		# keys=hyperedge, value=5, parents=B C

## standard value types
a=string	# MT::String (except for keywords 'true' and 'false')
b='string'	# MT::String
c="string"	# MT::String
d=-0.1234	# double
e=[1 2 3 0.5]	# MT::arr
f=(c d e)	# MT::Array<*Item> (list of other items in the KVG)
g      		# bool (default: true)
h=true		# bool
i=false		# bool
j={ a=0 }	# KeyValueGraph (special: does not require a =)

## parsing: = {..} (..) , and \n are separators for parsing key-value-pairs
b0=false b1 b2, b3() b4   # 4 booleans with keys 'b0', 'b1 b2', 'b3', 'b4'
k={ a, b=0.2 x="hallo"	  # KeyValueGraph with 6 items
  y
  z()=filename.org x }

## referring to items (constants/macros)
macro = 5
val=(macro) # *G["val"]->getValue<double>() will return 5

## any types
trans=<T t(10 0 0)>  # 'T' is the tag for an arbitrary type (here an ors::Transformation) which was registered somewhere in the code using the registry()

## strange notations
a()	   # key=a, value=true, parents=none
()	   # key=none, value=true, parents=none


