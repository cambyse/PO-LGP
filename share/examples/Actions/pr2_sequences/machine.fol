# These predicate symbols are used to indicate the 'state' of activities
Symbol conv
Symbol triggered
Symbol timeout
Symbol contact
Symbol quit

# These are symbols (constants) that indicate specific activities
# the control tasks of these activities are defined at the bottom of this file
Action CoreTasks
Action gazeAtHand
Action sensorTest
Action alignHand
Action positionHand
Action lowerHand
Action controlForce
Action homing
Action SensorActivityABC


# This is the initial state (just a propositional list of activities for now)
STATE { (CoreTasks) (SensorActivityABC) }

# The following defined transition rules of the activity state
# in the same format as our NID rules
# so far, they're propositional; but the whole machinery works for FOL

Rule{
  { (SensorActivityABC) (SensorActivityABC triggered) }
  { (quit) (SensorActivityABC)! (SensorActivityABC conv)! }
}

# This is only a shortcut to run the code without robot attached:
# it immediately flags the controlForce timeout
#Rule {  (controlForce),  { (controlForce timeout) } }

# These are just the parameter sets of the activities
Tasks {
  (sensorTest){ type="sensor" threshold=11. }
}

# just for checking the FOL fwd chaining engine .. not used
Terminal{ (homing conv) }
