# These predicate symbols are used to indicate the 'state' of activities
Symbol conv
Symbol timeout
Symbol contact
Symbol init
Symbol quit

# These are symbols (constants) that indicate specific activities
# the control tasks of these activities are defined at the bottom of this file
Action CoreTasks
Action gazeAtHand
Action alignHand
Action positionHand
Action lowerHand
Action controlForce
Action homing
pushForce

# This is the initial state (just a propositional list of activities for now)
(init)(CoreTasks) (gazeAtHand)  (CoreTasks) (gazeAtHand) 



Policy (pushForce){
  Step { { (alignHand) (positionHand) } }
  Step {
    (positionHand conv) (alignHand conv),
    { (lowerHand) (positionHand)! (positionHand conv)! }
  }
  Step {
    (lowerHand conv),
    { (controlForce) (lowerHand)! (lowerHand conv)! }
  }
  Step {
    (controlForce timeout),
    { (homing) (controlForce)! (controlForce timeout)! (gazeAtHand)! (alignHand)! (alignHand conv)! }
  }
  Step {
    (homing conv),
    { (quit) (homing)! (homing conv)! }
  }
}


Rule { (init),
  { (init)! (alignHand) (positionHand) } }

Rule { (positionHand conv) (alignHand conv),
  { (lowerHand) (positionHand)! (positionHand conv)! } }

Rule { (lowerHand conv),
  { (controlForce) (lowerHand)! (lowerHand conv)! } }

Rule { (controlForce timeout),
  { (homing) (controlForce)! (controlForce timeout)! (gazeAtHand)! (alignHand)! (alignHand conv)! } }

Rule{ (homing conv),
  { (quit) (homing)! (homing conv)! } }




# These are just the parameter sets of the activities
Tasks {
  (gazeAtHand){ type="gazeAt", ref1="endeffHead", ref2="endeffL", PD=[.5 .9 .1 10.], prec=1. }
  (alignHand){ type="vec", ref1="endeffL", vec1=[1 0 0], target=[0.7071, 0, -0.7071], PD=[.5, .9, .1, 10.] }
  (positionHand){ type="pos", ref1="endeffL", target=[.7, .3, .7], PD=[.5, .9, .1, 10.] }
  (lowerHand){ type="pos", ref1="endeffL", target=[.7, .3, .49], PD=[.5, .9, .1, 10.] }
  (controlForce){ type="forceCtrl", ref1="endeffForceL", target=[0 0 -7], timeOut=5. }
  (homing){ type="homing" }
}

# just for checking the FOL fwd chaining engine .. not used
Terminal{ (homing conv) }
