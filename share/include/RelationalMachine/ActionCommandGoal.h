/* Auto-generated by genmsg_cpp for file /home/bais/git/mlr/share/projects/RelationalMachine/msg/ActionCommandGoal.msg */
#ifndef RELATIONALMACHINE_MESSAGE_ACTIONCOMMANDGOAL_H
#define RELATIONALMACHINE_MESSAGE_ACTIONCOMMANDGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace RelationalMachine
{
template <class ContainerAllocator>
struct ActionCommandGoal_ {
  typedef ActionCommandGoal_<ContainerAllocator> Type;

  ActionCommandGoal_()
  : literal()
  , parameters()
  {
  }

  ActionCommandGoal_(const ContainerAllocator& _alloc)
  : literal(_alloc)
  , parameters(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _literal_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  literal;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameters_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  parameters;


  typedef boost::shared_ptr< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ActionCommandGoal
typedef  ::RelationalMachine::ActionCommandGoal_<std::allocator<void> > ActionCommandGoal;

typedef boost::shared_ptr< ::RelationalMachine::ActionCommandGoal> ActionCommandGoalPtr;
typedef boost::shared_ptr< ::RelationalMachine::ActionCommandGoal const> ActionCommandGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace RelationalMachine

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd28a6104f0aa6812b154a6942018980";
  }

  static const char* value(const  ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd28a6104f0aa681ULL;
  static const uint64_t static_value2 = 0x2b154a6942018980ULL;
};

template<class ContainerAllocator>
struct DataType< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RelationalMachine/ActionCommandGoal";
  }

  static const char* value(const  ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
string[] literal\n\
string parameters\n\
\n\
";
  }

  static const char* value(const  ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.literal);
    stream.next(m.parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ActionCommandGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::RelationalMachine::ActionCommandGoal_<ContainerAllocator> & v) 
  {
    s << indent << "literal[]" << std::endl;
    for (size_t i = 0; i < v.literal.size(); ++i)
    {
      s << indent << "  literal[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.literal[i]);
    }
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RELATIONALMACHINE_MESSAGE_ACTIONCOMMANDGOAL_H

