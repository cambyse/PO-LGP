
A KeyValueGraph is.. (three ways to describe what a KeyValueGraph is):

-- a graph, where each item (node/edge) has some keys and can store a
   value of any type

   [Actually a hyper graph: items can be nodes, edges (linking two
   nodes), or higher-order objects (linking arbitrary other items)]

-- a key-value list, where items can have parent/child relations and
   values can be of any type an

   [Actually a multi-map: items can have multiple keys, but at most
   one value]

-- the data structure which is one-to-one with the following file
   format

=== File format:

item:
[multiple tags] [(multiple parents)] [=] [value]

value:
none -> boolean
number -> double
'string' -> MT::String
[doubles] -> arr
<TypeKey ...> -> arbitrary type
(item-names) -> ItemL (subset of previously defined items)
{ item-list } -> KeyValueGraph (new subgraph of this item)

predefined TypeKeys:
<T ...> -> Transformation
<d ...> -> arr
<u ...> -> uintA


=== Examples

see the test.kvg for examples


=== FUTURE features:

* values from files

<Mesh:meshfile.off>

* include

#include "..."


=== relational graphs

item-name[range-variables](parent-names){ properties }

Example 1:

Variable x[t] { dim=2 }

reads ``create a //Variable// named //x[t]// for each instantiation of
//t//''


Example 2:

Variable x[t] { dim=2 }
Factor f[t](x[t],x[t+1]) { f=[.9 .1 .1 .9] }
Factor evidence(x[0]) { f=[1 0] }

reads ``create a //Variable// named //x[t]// for each time slice;
create a //Factor f[t]// for each time slice coupling to //x[t]// and
//x[t+1]// with the specified Markov kernel; create a single factor
coupling to x[0] with the specified evidence'' -- this defines a
simple Markov chain!


Example 3:

Variable on[a,b]
Variable ball[a]
Variable table[a]
Variable free[a]

Variable move[a,b,c]

Factor move-condition[a,b,c](on[a,b],free[c]) { coupling... }

defines a relational factor graph with predicates for different
instantiations of the logical variables a,b,c (somewhere one has to
specify that a,b,c are instances of the \emph{same} domain!

