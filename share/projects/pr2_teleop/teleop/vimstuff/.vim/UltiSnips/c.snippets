snippet realloc "realloc memory" b
void *${3:tmp} = realloc(${1:data}, ${2:size});
if ($3) {
    /* realloc succeeded, assign new pointer */
    $1 = $3;
} else {
    ${0:/* handle error */}
}
endsnippet

snippet getopt "getopt example structure" b
int opt;
int flags;
while ((opt = getopt(argc, argv, "nt:")) != -1) {
    switch (opt) {
    case 'n':
        flags = 1;
        break;
    case 't':
        nsecs = atoi(optarg);
        break;
    default: /* '?' */
        fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n", argv[0]);
        exit(EXIT_FAILURE);
    }
}
endsnippet

snippet gpl "GPL License Header" b
/*
 *  Copyright (C) 2014 Gerhard Gappmeier <gappy1502@gmx.net>
 *
 *  This file is part of ${1:programname}.
 *
 *  $1 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  $1 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with $1. If not, see <http://www.gnu.org/licenses/>.
 */
endsnippet

snippet encoderdef "Encoder Definitions"
#ifndef _UAENCODER_${1/.*/\U$0\E/g}_H_
#define _UAENCODER_${1/.*/\U$0\E/g}_H_

#include <stdint.h>

/* forward declarations */
struct ua_encoder_context;
struct ua_decoder_context;
struct ua_buffer;
struct ua_${1:typename};

int ua_encode_$1(struct ua_encoder_context *ctx, const struct ua_$1 *val);
int ua_decode_$1(struct ua_decoder_context *ctx, struct ua_$1 *val);
$0
#endif /* _UAENCODER_${1/.*/\U$0\E/g}_H_ */
endsnippet

snippet encoderimpl "Encoder Implementation"
#include "$1.h"
#include "encoder.h"
#include <uabase/memory.h>
#include <uabase/$1.h>
#include <uabase/buffer.h>
#include <stddef.h>

/**
 * Encodes the given ${1:typename} \c val in little endian format.
 * @param ctx the encoder context containing the buffers where serialized network data will be stored.
 * @param val the $1 to encode
 * @return Zero on success, -1 on error.
 */
int ua_encode_$1(struct ua_encoder_context *ctx, const struct ua_$1 *val)
{
    int ret = 0;

    return ret;
}

/**
 * Decodes a $1 into \c val.
 * @param ctx the decoder context containing the buffers with serialized network data.
 * @param val the $1 where the decoder result will be stored.
 * @return Zero on success, -1 on error.
 */
int ua_decode_$1(struct ua_decoder_context *ctx, struct ua_$1 *val)
{
    int ret = 0;

    return 0;
}
endsnippet

snippet uatypedef "UA datatype definition header file" !b
#ifndef _UABASE_${1/.*/\U$0\E/g}_H_
#define _UABASE_${1/.*/\U$0\E/g}_H_

struct ua_${1:typename} {
    $0
};

void ua_$1_init(struct ua_$1 *${2:t});
void ua_$1_clear(struct ua_$1 *$2);

int ua_$1_compare(const struct ua_$1 *a, const struct ua_$1 *b);
int ua_$1_copy(const struct ua_$1 *dst, const struct ua_$1 *src);

#endif /* _UABASE_${1/.*/\U$0\E/g}_H_ */
endsnippet

snippet uatypeimpl "UA datatype definition implementation" !b
#include "$1.h"
#include <string.h>

void ua_${1:typename}_init(struct ua_$1 *${2:t})
{
    memset($2, 0, sizeof(*$2));
}

void ua_$1_clear(struct ua_$1 *$2)
{
    ${0:/* TODO */}
}

int ua_$1_compare(const struct ua_$1 *a, const struct ua_$1 *b)
{
    /* TODO */
    return 0;
}

int ua_$1_copy(const struct ua_$1 *dst, const struct ua_$1 *src)
{
    /* TODO */
    return 0;
}

endsnippet
