//-- prepare logic world
//  for(mlr::Body *b:box) fol.addObject(b->name);
const bool smaller = true;
////  if(!smaller) fol.addObject("/toolbox/handle");
////  if(!smaller) fol.addObject("/toolbox/side_front");
////  if(!smaller) fol.addObject("/toolbox/side_back");
//  fol.addObject("screwdriverHandle");
//  fol.addObject("screwbox");
//  fol.addFact({"table","tableC"});
//  fol.addFact({"table","tableL"});
//  fol.addFact({"table","tableR"});
////  if(!smaller) fol.addAgent("baxterL");
//  fol.addAgent("baxterR");
//  fol.addAgent("handL");
//  fol.addAgent("handR");
//  fol.addFact({"INFEASIBLE","activate_grasping","handR","screwdriverHandle"});
//




// auto tableC = kin.getBodyByName("tableC");
  // auto tableL = kin.getBodyByName("tableL");
  // auto tableR = kin.getBodyByName("tableR");
  // BodyL box;

  { //grab desired final configuration & create initial configuration, placing objects far on the table

    //for(mlr::Body *b:kin.bodies) if(b->name.startsWith("/toolbox")) box.append(b);

    //memorize their relative positionings
//    targetAbs.resize(box.N);
//    targetRel.resize(box.N, box.N);
//    for(uint i=0;i<box.N;i++){
//      targetAbs(i) = box(i)->X;
//      for(uint j=i+1;j<box.N;j++){
//        mlr::Transformation rel;
//        rel.setDifference(box(i)->X, box(j)->X);
//        targetRel(i,j) = rel;
//        if(box(i)->name=="/toolbox/handle" && box(j)->name=="/toolbox/side_front") fol.addValuedFact({"attachable",box(i)->name, box(j)->name}, rel);
//        if(box(i)->name=="/toolbox/handle" && box(j)->name=="/toolbox/side_back")  fol.addValuedFact({"attachable",box(i)->name, box(j)->name}, rel);
//        if(box(i)->name=="/toolbox/side_front" && box(j)->name=="/toolbox/side_left")  fol.addValuedFact({"attachable",box(i)->name, box(j)->name}, rel);
//        if(box(i)->name=="/toolbox/side_front" && box(j)->name=="/toolbox/side_right")  fol.addValuedFact({"attachable",box(i)->name, box(j)->name}, rel);
//      }
//    }

    //position them on the left table
//    double xpos = -.6;
//    for(mlr::Body *b:box){
//      mlr::Joint *j = b->inLinks.scalar();
//      tableC->outLinks.removeValue(j);
//      j->from = tableL;
//      tableL->outLinks.append(j);
//      kin.checkConsistency();

//      j->B.setZero();
//      j->B.addRelativeTranslation(xpos, 0,0);
//      j->B.addRelativeRotationDeg(90,0,0,1);
//      xpos += .15;
//    }
